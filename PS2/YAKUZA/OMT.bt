//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "../../Common/includes/include.h"
LittleEndian();

typedef struct
{
    
    SetRandomBackColor();
    u32 AnimDataStart;
    u32 KeyframesPointer;
    u32 DataCount;
    u32 DataTypes;
    u32 FrameCount;
    u32 PointerTableStart;
    u32 BoneCount;
    u32 Pad;
    
}hdr;
hdr Header;

FSeek(Header.PointerTableStart);
typedef struct
{
    SetRandomBackColor();
    local int e;
    for (e=0;e<Header.DataCount;e++){
        
        u32 ANIMPOINTER;
   
    }
    local int f;
    for (f=0;f<Header.DataCount;f++){
        
        u32 KEYFRAMEPOINTER;
   
    }
    
    
}ptrs;
ptrs Pointers;

typedef struct
{
    
    SetRandomBackColor();
    local int e;
    for (e=0;e<Header.DataCount;e++){
        
        if (Header.FrameCount>=256){
            u16 BoneFrameCount;
        }
        else{
            u8 BoneFrameCount;
        }
   
    }
    
}FCS;
FCS FrameCounts;

FSeek(Header.DataTypes);
typedef struct
{
    
    SetRandomBackColor();
    local int e;
    for (e=0;e<Header.BoneCount;e++){
        
        u8 BoneDataType;
   
    }
    
}dt;
dt DataTypes;

FSeek(Header.KeyframesPointer);
typedef struct
{
    
    SetRandomBackColor();
    local int e;
    for (e=0;e<Header.DataCount;e++){
        
        FSeek(Pointers.KEYFRAMEPOINTER[e]);
        typedef struct
        {
            
            local int f;
            for (f=0;f<FrameCounts.BoneFrameCount[e];f++){
                if (Header.FrameCount>=256){
                    u16 Keyframe;
                }
                else{
                    u8 Keyframe;
                }
                
            }
            
            
        }BK;
        BK BoneKeyFrames;
   
    }
    
}kft;
kft KeyFrameTable;

FSeek(Header.AnimDataStart);
typedef struct
{
    
    SetRandomBackColor();
    local int e;
    local int Count=0;
    for (e=0;e<Header.BoneCount;e++){
        
        FSeek(Pointers.ANIMPOINTER[Count]);
        if (DataTypes.BoneDataType[e]==5){
            typedef struct
            {
                typedef struct
                {
                    local int f;
                    for (f=0;f<FrameCounts.BoneFrameCount[Count];f++){
                        typedef struct
                        {
                            
                            float X;
                            float Y;
                            float Z;
                            
                        }frm;
                        frm Frame;
    
                        
                    }
                    
                    
                    
                }ANIMDD;
                ANIMDD BoneLocationData;
                Count+=1;
                FSeek(Pointers.ANIMPOINTER[Count]);
                typedef struct
                {
                    local int f;
                    for (f=0;f<FrameCounts.BoneFrameCount[Count];f++){
               
                        typedef struct
                        {
                            
                            u16 W;
                            u16 X;
                            u16 Y;
                            u16 Z;
                            
                        }frm1;
                        frm1 Frame1;
    
                        
                    }
                    
                    
                    
                }ANIMD2;
                ANIMD2 BoneQuatData;
                Count+=1;
                
            }bone;
            bone Bone;
            
        }
        else if (DataTypes.BoneDataType[e]==4){
            
            
            FSeek(Pointers.ANIMPOINTER[Count]);
            typedef struct
            {
                typedef struct
                {
                    local int f;
                    for (f=0;f<FrameCounts.BoneFrameCount[Count];f++){
               
                        typedef struct
                        {
                            
                            u16 W;
                            u16 X;
                            u16 Y;
                            u16 Z;
                            
                        }frm2;
                        frm2 Frame;
    
                        
                    }
                    
                    
                    
                }ANIMD3;
                ANIMD3 BoneQuatData;
                Count+=1;
            }bn1;
            bn1 Bone;
            
            
        }
        else if (DataTypes.BoneDataType[e]==16){
            
            
            FSeek(Pointers.ANIMPOINTER[Count]);
            typedef struct
            {
                typedef struct
                {
                    local int f;
                    for (f=0;f<FrameCounts.BoneFrameCount[Count];f++){
               
                        typedef struct
                        {
                            
                            u16 W;
                            u16 X;
                          
                            
                        }frm3;
                        frm3 Frame;
    
                        
                    }
                    
                    
                    
                }ANIMD4;
                ANIMD4 BoneQuatData;
                Count+=1;
            }bn2;
            bn2 Bone;
            
            
        }
        else if (DataTypes.BoneDataType[e]==1){
            
            
            FSeek(Pointers.ANIMPOINTER[Count]);
            typedef struct
            {
                typedef struct
                {
                    local int f;
                    for (f=0;f<FrameCounts.BoneFrameCount[Count];f++){
               
                        typedef struct
                        {
                            
                            float PatternLeftHand;
                            float PatternRightHand;
                            float PatternHead;
                            
                          
                            
                        }frm4;
                        frm4 Frame;
    
                        
                    }
                    
                    
                    
                }ANIMD5;
                ANIMD5 BonePatternData;
                Count+=1;
            }bn3;
            bn3 Bone;
            
            
        }
        else if (DataTypes.BoneDataType[e]==0){
            
            
            
        }
    }
    
    
    
}ANIM;
ANIM AnimData;